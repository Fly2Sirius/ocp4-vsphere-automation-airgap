    - name:  Capture the content of the certificate
      set_fact:
        registry: "{{ registry | combine({ 'cert_content' : lookup('file','{{ playbook_dir }}/{{ inventory_hostname }}_domain.crt') }, recursive=True) }}"

    - name: Update the CA trust
      command: update-ca-trust extract

    - name: Pause for few seconds for the ca-trust to be updated
      pause:
        seconds: 2

    - name: Register the registry credentials
      set_fact:
        registry_credentials: "{{ registry.username }}:{{ registry.password }}"

    - name: Register the new pull secret
      set_fact:
        registry_pull_secret: "{'{{ registry.host }}:{{ registry.port }}':{'auth':'{{ registry_credentials | b64encode }}','email': '{{ registry.email }}' }}"

    - name: Create the files directory in the restricted role, if it doesn't already exist
      file:
        path: "{{ helper_vm.workdir }}/install-dir"
        state: directory
        mode: '0755'

    - name: Save the config.pull_secret variable into a file
      copy:
        content: "{{ config.pull_secret | to_json }}"
        dest: "{{ helper_vm.workdir }}/install-dir/pull-secret-orig.json"

    - name: Create a new pull secret file with the newly added registry details
      shell:  |
        jq '.auths += {{ registry_pull_secret | to_json }}' \
        < "{{ helper_vm.workdir }}/install-dir/pull-secret-orig.json" \
        > "{{ helper_vm.workdir }}/install-dir/pull-secret.json"

    - name: Mirror the registry
      command: |
        oc adm -a "{{ helper_vm.workdir }}/install-dir/pull-secret.json" release mirror \
        --from="quay.io/{{ registry.product_repo }}/{{ registry.product_release_name }}:{{ registry.product_release_version }}" \
        --to="{{ registry.host }}:{{ registry.port }}/{{ registry.repo }}" \
        --to-release-image="{{ registry.host }}:{{ registry.port }}/{{ registry.repo }}:{{ registry.product_release_version }}"
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
        no_proxy: "{{ config.cluster_name }}.{{ config.base_domain }}"
        GODEBUG: "x509ignoreCN=0" # need fix x509 error in certain version of oc/podman
      when: restricted_network|default(False) == False and skip_sync_mirror|default(False) == False

    - name: Mirror the release image to local image path
    # this task is used for airgap_create_ova playbook, we store the mirror data during ova preparation
      command: |
        oc adm -a "{{ helper_vm.workdir }}/install-dir/pull-secret.json" release mirror \
        --to-dir="{{ registry.offline_image_path }}/mirror" \
        "quay.io/{{ registry.product_repo }}/{{ registry.product_release_name }}:{{ registry.product_release_version }}"
      environment:
        GODEBUG: "x509ignoreCN=0" # need fix x509 error in certain version of oc/podman
      when: restricted_network|default(False) == False and
            skip_mirror_to_file|default(False) == False and
            registry.offline_image_path is defined

    - name: Mirror the registry from local image path
      command: |
        oc image mirror -a "{{ helper_vm.workdir }}/install-dir/pull-secret.json" \
        --from-dir="{{ registry.offline_image_path }}"/mirror "file://openshift/release:{{ registry.product_release_version.split("-")[0] }}*" "{{ registry.host }}:{{ registry.port }}/{{ registry.repo }}"
      environment:
        GODEBUG: "x509ignoreCN=0" # need fix x509 error in certain version of oc/podman
      when: restricted_network|default(False) == True and registry.offline_image_path is defined

    - name: Upload the nfs-client-provisioner image to mirror registry
      command: "skopeo copy --authfile {{ helper_vm.workdir }}/install-dir/pull-secret.json --format v2s2 --all docker-archive:{{ helper_vm.workdir }}/downloads/nfs-client-provisioner.tar docker://{{ registry.host }}:{{ registry.port }}/nfs-client-provisioner:latest"
      environment:
        GODEBUG: "x509ignoreCN=0" # need fix x509 error in certain version of oc/podman
      when: restricted_network|default(False) == True

    - name: Extract openshift-install from registry
      command: |
        oc adm -a "{{ helper_vm.workdir }}/install-dir/pull-secret.json" \
        release extract \
        --command=openshift-install \
        --to={{ helper_vm.workdir }}/bin \
        "{{ registry.host }}:{{ registry.port }}/{{ registry.repo }}:{{ registry.product_release_version.split("-")[0] }}"
      environment:
        GODEBUG: "x509ignoreCN=0" # need fix x509 error in certain version of oc/podman
      when: skip_sync_mirror|default(False) == False and restricted_network|default(False) == False

    - name: Point the pull secret to the local registry
      set_fact:
        config: |
          {% set auths=config['pull_secret'].pop('auths') %}
          {{ config | combine({ 'pull_secret':{'auths' : registry_pull_secret}}, recursive=True) }}

    - name: Fetch the original install-config.yaml to ansible controller
      fetch:
        src: "{{ helper_vm.workdir }}/install-dir/install-config.yaml"
        dest: "{{ playbook_dir }}/{{ inventory_hostname }}_install-config.yaml"
        flat: yes

    - name: Create a dictionary out of the install-config.yaml file
      include_vars:
        file: "{{ playbook_dir }}/{{ inventory_hostname }}_install-config.yaml"
        name: install_config

    - name: Replace the pull_secret of the install-config.yml with the updated one
      set_fact:
        install_config: |
          {{ install_config | combine({'pullSecret': config.pull_secret | to_json }, recursive=True)}}

    - name: Append to the additionalTrustBundle element in the install_config dict
      set_fact:
        install_config: "{{ install_config | combine({'additionalTrustBundle': install_config.additionalTrustBundle|default('') + registry.cert_content}, recursive=True)}}"

    - name: Convert the install_config dict back into YAML for installation
      copy:
        content: "{{ install_config | to_nice_yaml }}"
        dest: "{{ helper_vm.workdir }}/install-dir/install-config.yaml"

    - name: Backup the install-config.yaml file
      copy:
        src: "{{ helper_vm.workdir }}/install-dir/install-config.yaml"
        dest: "{{ helper_vm.workdir }}/install-dir/install-config.yaml.orig"
        remote_src: yes
