    - name: Install rpm key for epel 7
      rpm_key:
        state: present
        key: https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-7
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      when: ansible_facts['os_family'] == 'RedHat' and ansible_facts['distribution_major_version'] == '7'

    - name: Install EPEL release 7 rpm
      yum:
        name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
        state: present
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      when: ansible_facts['os_family'] == 'RedHat' and ansible_facts['distribution_major_version'] == '7'

    - name: Install rpm key for epel 8
      rpm_key:
        state: present
        key: https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-8
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      when: ansible_facts['os_family'] == 'RedHat' and ansible_facts['distribution_major_version'] == '8'

    - name: Install EPEL release 8 rpm
      yum:
        name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
        state: present
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      when: ansible_facts['os_family'] == 'RedHat' and ansible_facts['distribution_major_version'] == '8'

    - name: Install the necessary linux packages which will be needed later in the ansible run
      package:
        name:
          - patch
          - gzip
          - genisoimage
          - jq
          - rsync
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      become: true

    # 远端python版本
    - name: Display Ansible's Python version
      debug:
        var: ansible_python_version
        verbosity: 1

    - name:  Set the ansible_python_major_version facts, which will be used to identify get_pip approach
      set_fact:
        ansible_python_major_version: "{{ ansible_python_version |regex_replace('\\.[^.]+$') }}"

    - name: Download get-pip.py for Python Archived
      get_url:
          url: "https://bootstrap.pypa.io/pip/{{ ansible_python_major_version }}/get-pip.py"
          dest: /tmp/get-pip.py
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      when: ansible_python_major_version in ["2.6","2.7","3.2","3.3","3.4","3.5","3.6"]

    - name: Download get-pip.py for Python Latest
      get_url:
          url: "https://bootstrap.pypa.io/pip/{{ ansible_python_major_version }}/get-pip.py"
          dest: /tmp/get-pip.py
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      when: ansible_python_major_version not in ["2.6","2.7","3.2","3.3","3.4","3.5","3.6"]


      #when: ansible_python_version is match("2.*")
     
    #- name: Download get-pip.py for Python 3
    #  get_url:
    #      url: 'https://bootstrap.pypa.io/get-pip.py'
    #      dest: /tmp/get-pip.py
    #  environment:
    #    http_proxy: "{{ helper_vm.proxy_env }}"
    #    https_proxy: "{{ helper_vm.proxy_env }}"
    #  when: ansible_python_version is match("3.*")
    
    - name: Install pip with get-pip.py (python2)
      command: python /tmp/get-pip.py
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      when: ansible_python_version is match("2.*")

    - name: Install pip with get-pip.py (python3)
      command: python3 /tmp/get-pip.py
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      when: ansible_python_version is match("3.*")
       
    - name: Upgrade pip setuptools
      command: pip install setuptools --upgrade
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"

    #- name: Install or update pip
    #  community.general.easy_install:
    #    name: pip
    #    state: latest
    
    - name: Install pyvmomi
      pip:
        name: pyvmomi
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      become: true

    - name: Install required ansible version
      pip:
        name: ansible==2.9.19  # need specific the ansible version to avoid vmware_guest module bug
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      become: true

#    - name: Pull the registry docker image withouth login
#      podman_image:
#        name: "{{ registry.registry_image }}"
#      environment:
#        http_proxy: "{{ helper_vm.proxy_env }}"
#        https_proxy: "{{ helper_vm.proxy_env }}"
#      when: registry.enabled and
#            (registry.dockerio_user is not defined or registry.dockerio_user == None)
#
#    - name: Pull the registry docker image
#      podman_image:
#        name: "{{ registry.registry_image }}"
#        username: "{{ registry.dockerio_user }}"
#        password: "{{ registry.dockerio_pass }}"
#      environment:
#        http_proxy: "{{ helper_vm.proxy_env }}"
#        https_proxy: "{{ helper_vm.proxy_env }}"
#      when: (registry.enabled) and
#            (registry.dockerio_user is defined and registry.dockerio_user != None) and
#            (registry.dockerio_pass is defined and registry.dockerio_pass != None)


    # Due to podman_image module bug, username/password not work, change to command module:
    - name: Pull the registry docker image withouth login
      command: podman pull {{ registry.registry_image }}
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      when: registry.enabled and
            (registry.pull_creds is not defined or registry.pull_creds == None)

    - name: Pull the registry docker image
      command: podman pull {{ registry.registry_image }} --creds {{ registry.pull_creds }}
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      when: (registry.enabled) and
            (registry.pull_creds is defined and registry.pull_creds != None)


    - name: Clean up existing bin, install-dir and downloads folders
      file:
        path: "{{ helper_vm.workdir }}/{{ item }}"
        state: absent
      with_items: ["bin", "install-dir", "downloads"]
      when: clean is defined

    - name: Must always clean install-dir
      file:
        path: "{{ helper_vm.workdir }}/{{ item }}"
        state: absent
      with_items: ["install-dir"]
      when: clean is not defined

    - name: Create bin, install-dir and downloads folders
      file:
        path: "{{ helper_vm.workdir }}/{{ item }}"
        state: directory
        mode: '0755'
      with_items: ["bin", "downloads","downloads/ISOs", "install-dir"]

    - name: Download the oc client binary
      get_url:
        url: "{{ download.openshiftClient }}"
        dest: "{{ helper_vm.workdir }}/downloads/oc_client.tar.gz"
        validate_certs: no
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      register: oc_client_download

    - name: Download the openshift-install binary
      get_url:
        url: "{{ download.openshiftInstall }}"
        dest: "{{ helper_vm.workdir }}/downloads/openshift_install.tar.gz"
        validate_certs: no
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      register: openshift_install_download

    - name: Download govc
      get_url:
        url: "{{ download.govc}}"
        dest: "{{ helper_vm.workdir }}/downloads/govc.gz"
        validate_certs: no
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"

    - name: Download Openshift 4 ISO file as rhcos-installer.iso
      get_url:
        url: "{{ download.iso }}"
        dest: "{{ iso_dir }}/rhcos-installer.iso"
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      when: ocp_major_version in ["4.3","4.4","4.5"] or sno.enabled

    - name: Download coreos-installer for SNO
      get_url:
        url: "{{ download.coreosinstaller}}"
        dest: "{{ helper_vm.workdir }}/downloads/coreos-installer"
        validate_certs: no
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      when: sno.enabled

    - name: Copy the nfs provisioner docker image to local disk
      #command: "skopeo copy docker://quay.io/external_storage/nfs-client-provisioner:latest docker-archive:{{ helper_vm.workdir }}/downloads/nfs-client-provisioner.tar"
      command: "skopeo copy docker://{{ storage.setup_nfs_image }} docker-archive:{{ helper_vm.workdir }}/downloads/nfs-client-provisioner.tar"
      ignore_errors: True
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      when: registry.enabled and storage.setup_nfs_sc
