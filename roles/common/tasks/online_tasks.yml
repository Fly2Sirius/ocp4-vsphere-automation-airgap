    - name: Install EPEL release 7 rpm
      yum:
        name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
        state: present
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      when: ansible_facts['os_family'] == 'RedHat' and ansible_facts['distribution_major_version'] == '7'

    - name: Install EPEL release 8 rpm
      yum:
        name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
        state: present
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      when: ansible_facts['os_family'] == 'RedHat' and ansible_facts['distribution_major_version'] == '8'

    - name: Install the necessary linux packages which will be needed later in the ansible run
      package:
        name:
          - patch
          - gzip
          - genisoimage
          - jq
          - rsync
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      become: true

    # 远端python版本
    - name: Display Ansible's Python version
      debug:
        var: ansible_python_version
        verbosity: 1

    - name: Install python-pip or python2-pip if Ansible uses Python 2
      package:
        name:
          - "python2-pip"
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      when: ansible_python_version is match("2.*")
      become: true
    - name: Install python3-pip if Ansible uses Python 3
      package:
        name:
          - python3-pip
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      when: ansible_python_version is match("3.*")
      become: true

    - name: Install pyvmomi
      pip:
        name: pyvmomi
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      become: true

    - name: Pull the registry docker image
      podman_image:
        name: "{{ registry.registry_image }}"
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      when: registry.enabled

    - name: Clean up existing bin, install-dir and downloads folders
      file:
        path: "{{ helper_vm.workdir }}/{{ item }}"
        state: absent
      with_items: ["bin", "install-dir", "downloads"]
      when: clean is defined

    - name: Must always clean install-dir
      file:
        path: "{{ helper_vm.workdir }}/{{ item }}"
        state: absent
      with_items: ["install-dir"]
      when: clean is not defined

    - name: Create bin, install-dir and downloads folders
      file:
        path: "{{ helper_vm.workdir }}/{{ item }}"
        state: directory
        mode: '0755'
      with_items: ["bin", "downloads","downloads/ISOs", "install-dir"]

    - name: Download the oc client binary
      get_url:
        url: "{{ download.openshiftClient }}"
        dest: "{{ helper_vm.workdir }}/downloads/oc_client.tar.gz"
        validate_certs: no
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      register: oc_client_download

    - name: Download the openshift-install binary
      get_url:
        url: "{{ download.openshiftInstall }}"
        dest: "{{ helper_vm.workdir }}/downloads/openshift_install.tar.gz"
        validate_certs: no
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      register: openshift_install_download

    - name: Download govc
      get_url:
        url: "{{ download.govc}}"
        dest: "{{ helper_vm.workdir }}/downloads/govc.gz"
        validate_certs: no
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"

    - name: Download Openshift 4 ISO file as rhcos-installer.iso
      get_url:
        url: "{{ download.iso }}"
        dest: "{{ iso_dir }}/rhcos-installer.iso"
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"

    - name: Copy the nfs provisioner docker image to local disk
      command: "skopeo copy docker://quay.io/external_storage/nfs-client-provisioner:latest docker-archive:{{ helper_vm.workdir }}/downloads/nfs-client-provisioner.tar"
      environment:
        http_proxy: "{{ helper_vm.proxy_env }}"
        https_proxy: "{{ helper_vm.proxy_env }}"
      when: registry.enabled and storage.setup_nfs_sc
